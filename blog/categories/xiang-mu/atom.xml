<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：项目 | 出头天]]></title>
  <link href="http://duduainankai.github.io/blog/categories/xiang-mu/atom.xml" rel="self"/>
  <link href="http://duduainankai.github.io/"/>
  <updated>2016-11-13T22:07:47+08:00</updated>
  <id>http://duduainankai.github.io/</id>
  <author>
    <name><![CDATA[杜杜]]></name>
    <email><![CDATA[nkdudu@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[铅笔画和图片墙]]></title>
    <link href="http://duduainankai.github.io/blog/2016/10/23/qian-bi-hua-he-tu-pian-qiang/"/>
    <updated>2016-10-23T10:03:05+08:00</updated>
    <id>http://duduainankai.github.io/blog/2016/10/23/qian-bi-hua-he-tu-pian-qiang</id>
    <content type="html"><![CDATA[<p>  有一天在逛知乎的时候看到了有人推荐了一篇论文: <a href="http://www.cse.cuhk.edu.hk/leojia/projects/pencilsketch/pencil_drawing.htm">Combining Sketch and Tone for Pencil Drawing Production</a>。讲的是一个关于铅笔画算法的实现，看作者贴了一些效果图觉得相当有趣，看着就想着试试看有没可能自己也实现一下。</p>

<p>  刚好中秋前刚从医院回来，国庆也不打算出门了，就用这两个假期看看论文研究一下，然后照着开源的matlab代码用python重新实现了一遍(其实就是翻译了一下。。)。最后在网上找了一个开源的图片墙页面，把处理的结果贴一下，也算是从头到尾做完一整套了吧。</p>

<p>  依旧还是先上GitHub：<a href="https://github.com/duduainankai/pencil-python">python版铅笔画</a>。然后是<a href="http://lizheming.top/blog/pencil">图片墙</a>。<!--more--></p>

<h3 id="section">铅笔画算法</h3>

<p>  论文几位作者都来自香港中文大学，12年npar的best paper，还是挺厉害的了。论文的工作就是给定一张正常的比如相机的图片，然后通过一定的处理可以得到同一张图片用✏️画出来的效果，挺有意思的对吧。但是因为原先基本没有接触过图像处理的东西，所以论文看起来还是挺费劲的。</p>

<p>  简单来说算法可以分成两大步: 生成笔画结构和色调渲染，最后的处理结果就是这两步的结合，如下图所示(图片来源于论文)。</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/2.png" alt="" /></p>

<h4 id="section-1">生成笔画结构</h4>

<p>  生成笔画结构的过程其实就是把图片的轮廓给画出来，就像用铅笔把一个人的身体给描绘出来一样，需要得到物体的边缘线。</p>

<p>  其实这一步是可以有非常简单的做法的，将图片转换成灰度图片以后，我们只需要计算相邻两个像素点值，也就是做一个差分的结果就是轮廓图了(大二学的数字信号处理留给我的唯一印象。。)。因为在灰度值的区间是[0,255]，也就是说如果两个相邻像素点属于同一块区域那么他们的差值会很小，反应在图片上就是一个很暗的点，而如果是一个明显的分界线那么差值比较大就是一个比较亮的点。</p>

<p>  这么做虽然简单，但最大的缺点就是容易受到噪声的干扰，并且只有对于明显的分界线有比较好的效果，对于细节的纹理就没法处理了。论文针对这个内容提出了改进的方法，分为以下两个步骤: classification和line shaping。</p>

<p><strong>classification</strong></p>

<p>  目的是将每一个像素点分类到一个方向上。</p>

<p>  在x和y方向上计算差分或者叫梯度，然后求和的平方根作为这个像素点的梯度值。得到梯度以后，将圆周分成八个方向的方法，分别用一个方向向量来表示。同时将这个方向向量作为卷积核，图像的灰度矩阵分别与这八个卷积核做卷积，每个像素点在八个方向上卷积结果最大的就是这个像素点的方向。</p>

<p>  最后处理得到的结果是一个map set，一个前二维与图片大小相同，第三维是方向数的矩阵，表示每一个方向上所属的像素点的梯度值。对于一个像素点而言就是它只在它所属的方向上有值，其余方向上都是0。</p>

<p><strong>line shaping</strong></p>

<p>  这一步就是画线的过程，用上一步得到的map set再次和八个方向向量做卷积，这一步会把同一个方向上的像素点连接起来，这样就能够很有效的避免孤立点的存在，细节的纹理能够有很好的体现。</p>

<p>  以上两步完成之后就得到了第一个输出结果S，完成一半的工作啦，来看看处理的效果吧，点击可以看大图。</p>

<div align="center" style="margin-top:20px">	
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58.jpg" style="height:230px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58_s.jpg" style="height:230px" />
</div>

<div align="center">	
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui.jpg" style="height:205px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui_s.jpg" style="height:205px" />
</div>

<h4 id="section-2">色调渲染</h4>

<p>  铅笔画在完成了图片的笔画结构后，一般来说作者还会通过在不同的地方重复描笔的次数来控制颜色的深浅来描述不同的物体或者是阴影。因此这第二步的工作就是在模拟这个步骤从而给图片上色。这一步也是分成两小步来完成的。</p>

<p><strong>直方图匹配</strong></p>

<p>  作者提出一副铅笔画图像的直方图是有一定pattern的，因为只是由黑色的铅笔和白色的纸张构成的。因此可以简单的分成三种区域：bright、mild和dark，同时可以用三种分布来模拟这三个区域：拉普拉斯分布、均匀分布和高斯分布，而一张铅笔画图像的最终直方图分布是这三种分布的加权和。这些权值和分布的控制参数作者直接给出了得到的结果实现的时候也就直接用了，没有给出具体的过程(不过就算有我应该也看不懂。。)。然后将这个直方图和一个正常图片的直方图进行匹配，匹配就是假设在图片中有一个m、n位置的像素点值为200，而在这个图片模拟出的直方图中像素200的点对应y值为100，正常图片直方图中y值最接近100的像素点值是220，那么就将m、n位置上的像素点修正为220的过程。这一步返回的结果就是修正后的图片灰度矩阵。</p>

<p><strong>纹理渲染</strong></p>

<p>  这一步在计算每个像素点需要被重复描绘的次数，然后利用一个先前准备好的用于描绘的texture模板图片进行描笔。利用上一步得到的修正的图片灰度矩阵和模板图片的灰度矩阵，以及一个我看不懂的公式就可以算出需要重复的次数beta啦，然后就能愉快的得到结果T了。</p>

<p>  也来看看这一步获得的T的效果吧。</p>

<div align="center" style="margin-top:20px">	
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58.jpg" style="height:230px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58_t.jpg" style="height:230px" />
</div>

<div align="center">	
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui.jpg" style="height:205px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui_t.jpg" style="height:205px" />
</div>

<h4 id="section-3">最后的结果</h4>

<p>  最后把两步的结果S和T相乘就能得到一个完成的结果啦，两个操作相互complete的。</p>

<div align="center" style="margin-top:20px">
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58_pencil.jpg" style="height:205px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui_pencil.jpg" style="height:205px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/58_color.jpg" style="height:205px" />
	<img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/sjtu_xuhui_color.jpg" style="height:205px" />
</div>

<p>  然后我Google了一个简单的图片墙页面，想看更多的图片处理结果可以点<a href="http://lizheming.top/blog/pencil">这里</a>啦，不过图片太多加载可能会有点慢。</p>

<h4 id="section-4">总结</h4>

<p>  写这个项目就是觉得挺有趣的，花的时间其实也不短，然后写完了也去知乎上答了个问题:<a href="https://www.zhihu.com/question/21395276">可以用 Python 编程语言做哪些神奇好玩的事情</a>，然而放了两张江学长的铅笔画像就被建议修改了。。问题是我修改完了居然也不给恢复正常是要怎样。</p>

<p>  收获也不算少吧，好歹开始入门numpy、scipy这一系列的科学计算库了，也许哪天有时间能好好学学机器学习的时候用得到呢。</p>

<p>  还有一个就是写获得彩色铅笔画的时候，需要从Ycbcr这个颜色通道转换会RGB这个通道，matlab是自带了这个函数的，但是python没有啊。一路google、stackoverflow下来找到的转换方式都不对，但用同样的输出在matlab里转换一下却是对的。我只好用matlab打着断点一步一步的看处理过程，想着要不自己造个轮子好了。可是最后发现matlab调的是一个C函数的实现，然后又接着一路谷歌爆栈网的搜python怎么调C代码，简单了解了下<a href="https://docs.python.org/2.7/library/ctypes.html">ctypes</a>，发现找不到需要的C函数的so文件。更崩溃的是发现这个C的实现里面又调用了matlab的函数，好吧这条路算是走到头了。。最后无奈的又开始探索opencv了。因为最先开始写的时候我看到的帖子里说安装opencv是个非常麻烦的过程，列出了好多步骤看的我头大因此我原来都想着不要用opencv来。但最后走投无路了我就想说用homebrew装一个试下好了，奇迹的是居然还真能有用，看到最后成功的时候真的是在宿舍大叫了一声，还好舍友不在。。</p>

<p>  看论文确实费脑子啊，虽然最后实现出来了但也还是不少看不懂的地方。。想到这学期就得开题了也只能硬着头皮看了，希望最后能有个好结果吧，加油了！COYG！</p>

<p>  最后的最后，祝自己生日快乐吧。</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/pencildraw/71_color.jpg" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里云OSS初体验]]></title>
    <link href="http://duduainankai.github.io/blog/2016/08/03/a-li-yun-osschu-ti-yan/"/>
    <updated>2016-08-03T15:27:32+08:00</updated>
    <id>http://duduainankai.github.io/blog/2016/08/03/a-li-yun-osschu-ti-yan</id>
    <content type="html"><![CDATA[<p>  终于开始放暑假了，这一个学期一边要带着几个学弟一起做实验室项目还要一边上CSDI这种神课真的是身心具疲。不过确实也收获了很多原来不曾有过的体验，也算有所成长了吧。现在放假了也可以有时间来总结总结这个项目里的内容了。</p>

<p>  先记录其中一个最感兴趣也比较新鲜的阿里云对象存储OSS的使用吧。<!--more--></p>

<h3 id="oss">OSS是什么</h3>
<p>  阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。简单来说把每一个被存储的文件看作一个对象，可以通过API或者控制台的方式进行上传下载。同时支持流式写入和文件写入，以及流式读取文件。可以与CDN搭配使用，OSS作为源站，提供稳定、高带宽的服务。</p>

<h3 id="oss-1">选择OSS的原因</h3>
<p>  简单来说这个项目要完成的一个点就是开发的网站上面能够提供上传视频、视频存储以及多人同时观看视频的功能。</p>

<p>  为了保证视频文件的可用性，在最初的设计上我们采用的方式是后端用开源的hdfs来存储文件，同时利用hadoop提供的Java API额外开发一个与文件系统进行上传下载交互的应用服务，使用tomcat作为应用服务器。</p>

<p>  当我们确实这么开发完成后发现其实存在着很多的不足之处，甚至是比较严重的问题:</p>

<p>  1.每一次视频的请求都需要两次的视频传输。第一次是从hdfs到应用服务器的传输，第二次是应用服务器返回给前端页面的传输。</p>

<p>  2.视频的流式传输需要自己实现。</p>

<p>  对于第一点，每一次传输都要占据一定的带宽，特别是当视频比较大的时候，多一次的传输意味着多一倍的等待时间。我们试过在应用服务器下缓存热度高的视频，但这毕竟不能彻底解决这个问题。第二点又更是个大问题了，而且一开始并没有考虑到只是简单的从hdfs读取到文件后写进response的输出流中，于是返回到播放器中的视频必须全部下载完以后才能够拖动进度条，否则的话会继续从头开始播放，极大的影响了用户体验。</p>

<p>  后来网上搜了一圈相应的解决方案，论坛里有人提到可以使用OSS，于是就到阿里云官网简单的了解了一下。在使用OSS的情况下，新增的文件系统的应用服务器完全由阿里云的服务提供，而不用我们维护，同时支持流式读取文件也可以很好的解决视频拖拽播放的需求。于是就要苦逼的把原来上传下载的逻辑都重新写过了。</p>

<h3 id="oss-2">OSS的使用</h3>

<p>  阿里云OSS提供了许多的SDK，还是很人性化的，但是也看到很多人在论坛吐槽文档不够详细，刚好记录下自己摸索的过程。短时间内解决这个也有着不小的挑战，但是毕竟有着死线在驱动效率也是高了不少。</p>

<h4 id="section">准备工作</h4>

<p>  其实就是要开通OSS服务，选择套餐，实名认证，我们采用的是半年40G的存储包，只要5块钱还是相当划算的。然后需要创建一个存储空间即bucket，获取账号的accessId和accessKey。</p>

<h4 id="oss-3">使用OSS</h4>

<p>  官网提供了三个教程进阶的介绍了直接在客户端签名、在服务端签名、在服务端签名并设置回调来讲解在一个web应用中使用OSS。对于第一种直接把accessId和accessKey暴露在客户端JS代码中的方式有风险，并不推荐在项目中使用，因此我也就不记录了。</p>

<p><strong>服务端签名，没有回调</strong></p>

<p>  在服务器端用accessId、accessKey和有效时长进行签名，客户端通过ajax请求获取的方式是比较安全的。整个流程的示意图是：</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/oss1.png" alt="" /></p>

<p>  然后来看看服务器端生成签名的代码吧。记得要先导入阿里云提供的aliyun-sdk-oss-2.0.6.jar、aliyun-java-sdk-sts-2.1.6.jar、aliyun-java-sdk-core-2.1.7.jar这三个包。</p>

<p>``` java
private final static String endpoint = “你的OSSendpoint”;
private final static String accessId = “你账号的accessId”;
private final static String accessKey = “你账号的accessKey”;
private final static String bucket = “文件上传到的bucket”;
private String host = “https://” + bucket + “.” + endpoint;</p>

<p>/**
 * 生成签名policy的函数
 * @param dir  存储所上传文件的bucket下的文件夹
 */
private void generatePolicy(String dir) {
    // 初始化oss客户端
    OSSClient client = new OSSClient(endpoint, accessId, accessKey);
    try { 	
    	long expireTime = 3000;		// 签名有效时长，单位秒
    	long expireEndTime = System.currentTimeMillis() + expireTime * 1000;
        Date expiration = new Date(expireEndTime);
        PolicyConditions policyConds = new PolicyConditions();
        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000);
        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</p>

<pre><code>    // 生成签名
    String postPolicy = client.generatePostPolicy(expiration, policyConds);
    byte[] binaryData = postPolicy.getBytes("utf-8");
    String encodedPolicy = BinaryUtil.toBase64String(binaryData);
    String postSignature = client.calculatePostSignature(postPolicy);
    dataMap.put("accessid", accessId);
    dataMap.put("policy", encodedPolicy);
    dataMap.put("signature", postSignature);
    dataMap.put("dir", dir);
    dataMap.put("host", host);
    dataMap.put("expire", String.valueOf(expireEndTime / 1000));

    // 需要在oss控制台设置cros，允许post方法的执行
    response.setHeader("Access-Control-Allow-Origin", "*");
    response.setHeader("Access-Control-Allow-Methods", "GET, POST");
} catch (Exception e) {
	e.printStackTrace();
} }
</code></pre>

<p>``` 
  前端通过ajax等方式发送请求获取到这个policy，然后构造相应的表单数据发送请求给oss，就可以实现文件的上传了。</p>

<p><code>
url: host, // 后台返回的host
data: { 
    'key' : g_object_name,	// 存储的文件名
    'policy': policyBase64,	// 从后台获取的policy
    'OSSAccessKeyId': accessid, // 从后台获取的accessid
    'success_action_status' : '200', //让服务端返回200,不然，默认会返回204
    'signature': signature, // 从后台获取的签名
    file: $scope.file // 上传的文件，该字段一定要放在最后，否则会报400
}
</code></p>

<p><strong>服务端签名，设置回调</strong></p>

<p>  很多时候只实现了文件的上传并不够。比如用户上传一个视频后我们往往还需要往数据库里添加一条记录，记录是谁上传了视频，上传的视频在哪个分类下等等。OSS提供了设置回调函数的功能，使得可以在完成文件上传后向我们指定的应用服务器的接口发送一个相应的请求来实现上面的。这时候的流程图和生成policy的代码是这样的:</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/oss2.png" alt="" /></p>

<p>```
private final static String endpoint = “你的OSSendpoint”;
private final static String accessId = “你账号的accessId”;
private final static String accessKey = “你账号的accessKey”;
private final static String bucket = “文件上传到的bucket”;
private String host = “https://” + bucket + “.” + endpoint;</p>

<p>/**
 * 生成签名policy的函数
 * @param dir  存储所上传文件的bucket下的文件夹
 * @param callback_param  回调函数组成的字符串
 */
private void generatePolicy(String dir, String callback_param) {
    OSSClient client = new OSSClient(endpoint, accessId, accessKey);
    try { 	
    	long expireTime = 3000;		// 签名有效时长，单位秒
    	long expireEndTime = System.currentTimeMillis() + expireTime * 1000;
        Date expiration = new Date(expireEndTime);
        PolicyConditions policyConds = new PolicyConditions();
        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000);
        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</p>

<pre><code>    String postPolicy = client.generatePostPolicy(expiration, policyConds);
    byte[] binaryData = postPolicy.getBytes("utf-8");
    String encodedPolicy = BinaryUtil.toBase64String(binaryData);
    String postSignature = client.calculatePostSignature(postPolicy);
    dataMap.put("accessid", accessId);
    dataMap.put("policy", encodedPolicy);
    dataMap.put("signature", postSignature);
    //dataMap.put("expire", formatISO8601Date(expiration));
    dataMap.put("dir", dir);
    dataMap.put("host", host);
    dataMap.put("expire", String.valueOf(expireEndTime / 1000));
    
    // 如果回调函数的字符串不为空则添加，否则即为不需要回调的方法
    if (callback_param != null) {
        byte[] binaryDatas = callback_param.getBytes();
        String callback = BinaryUtil.toBase64String(binaryDatas);
        dataMap.put("callback", callback);
    }

response.setHeader("Access-Control-Allow-Origin", "*");
    response.setHeader("Access-Control-Allow-Methods", "GET, POST");
} catch (Exception e) {
	e.printStackTrace();
} } ``` &amp;emsp;&amp;emsp;这是callback_param的一个例子：
</code></pre>

<p><code>
String callback_param="{" + 
    "\"callbackUrl\":" +
    "\""+ callbackurl + "\"," + 
    "\"callbackBody\":" +
    "\"bucket=${bucket}&amp;object=${object}&amp;size=${size}&amp;mimeType=${mimeType}" +
    "&amp;imageInfo.height=${imageInfo.height}&amp;imageInfo.width=${imageInfo.width}" +
    "&amp;name=${x:name}&amp;token=" + token + "&amp;videotype=1\"" + 
"}";
// bucket等参数是oss执行回调时会自动加上的参数，而如果我们需要自定义参数并且需要在执行到上传文件的请求时才能确定的，
// 比如这边的name，那么我们需要采用${x:***}的方式，***表示的是变量名
// 而可以在生成policy就知道值的参数比如这边的token那么直接拼接字符串就行了
// callbackurl需要指定相应回调请求的服务器、端口和URL，method为POST
</code></p>

<p>  前端构造的上传文件的数据中需要增加回调body和自定义参数的值：</p>

<p><code>
url: host,
data: { 
  'key' : g_object_name,	// 存储的文件名
  'policy': policyBase64,	// 从后台获取的policy
  'OSSAccessKeyId': accessid, // 从后台获取的accessid
  'success_action_status' : '200', //让服务端返回200,不然，默认会返回204
  'signature': signature, // 从后台获取的签名
  'callback' : callbackbody,	// 从后台获取的回调内容
  'x:name' : $scope.file.name,	// 自定义参数name的值，键一定要是x:***的形式
  file: $scope.file // 上传的文件，该字段一定要放在最后，否则会报400
}
</code></p>

<p>  这样就完成了整个OSS上传文件的过程啦，其实做完了来看好像内容也不多，但刚上手的时候还是有很多困惑，特别是自定义参数那一块，好多人都在吐槽文档写的不清楚。</p>

<p>  除此之外，OSS还可以与许多的富文本编辑器结合，比如我们项目中采用的是summernote。原本上传图片的话summernote会直接编码图片成字符串，然后与其他文本内容放在一起存进数据库里，但这样一来图片多的话编码出的字符串会特别大，从数据库取出的耗时会特别长。如果修改成上传的图片存储到OSS中，那么编码之后的内容就只是一个图片的地址，这样就小很多了。</p>

<h3 id="section-1">总结</h3>

<p>  其实不止是阿里云，越来越多的云厂商包括腾讯云、七牛云等等都提供了相应的对象存储服务。而越来越多的云服务比如云主机、云数据库等等也越来越方便了开发者，好比利用了OSS省去了自建存储系统的过程，同时自带三备份、与CDN相结合提高访问速率，让开发者可以专注业务逻辑的实现，这确实是造福广大开发者的好事。</p>

<p>  我也相信越来越多的服务都会往云上迁移，越来越多的开发者也会更多的了解到这些云产品的使用甚至是开发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端版知乎客户端]]></title>
    <link href="http://duduainankai.github.io/blog/2016/07/17/zhong-duan-ban-zhi-hu-ke-hu-duan/"/>
    <updated>2016-07-17T10:03:05+08:00</updated>
    <id>http://duduainankai.github.io/blog/2016/07/17/zhong-duan-ban-zhi-hu-ke-hu-duan</id>
    <content type="html"><![CDATA[<p>  搭完博客也过去大半年都有了却什么都还没写过，虽然不能用太忙来做借口(其实就是懒)，不过过去的一个学期确实感觉有够忙的。</p>

<p>  但是好歹也学了点东西，特别是开始写python了感觉真的很爽，于是就有了这个用爬虫做的终端版的知乎客户端。可以用命令行来刷知乎，用命令来点赞，感觉还挺有意思的。</p>

<p>  直接上Github咯：<a href="https://github.com/duduainankai/zhihu-terminal">终端版知乎客户端</a><!--more--></p>

<h3 id="section">准备</h3>

<p>  记得很早之前有天在刷知乎的时候TL里出现了一个很有趣的问题：<a href="https://www.zhihu.com/question/27621722">能利用爬虫技术做到哪些很酷很有趣很有用的事情？</a>，看着各种高票回答感觉自己也心动了，也想做些有意思的事情。而且一直也想好好的学一下python，以前虽然看过一遍教程跟过公开课不过就算都拿了证书也只是在各种print，没做过什么有用的东西很快也就都忘了。</p>

<p>  于是就先找了一遍知乎上关于python入门的回答，大致看了一遍learn python the hard way，感觉基本语法差不多了也就开始重点找爬虫的资料了，感觉一边写一边学效果会更好。</p>

<h3 id="section-1">爬虫</h3>

<p><strong>我所认为的爬虫可以概括为任何用代码、机器模拟人为浏览器访问网站及其操作的过程。</strong></p>

<p>  知乎上有许多关于爬虫入门的回答，想来也挺有趣的：我在知乎上学爬虫然后来爬知乎。首先当然是要有一些计算机网络的知识了，至少了解到什么是get方法、什么是post方法，两者之间的区别这样；然后就可以动手开始写啦。一开始也是用urllib和urllib2写过一两个小爬虫的，但是自从后来一接触到了<a href="https://github.com/kennethreitz/requests">requests</a>之后就被折服了，因为实在太方便了，有人评价说是一键安装的效果，感觉很到位。</p>

<p>  然后就可以开始着手爬一些东西了，比如网上各种教程说的豆瓣、贴吧和糗事百科之类的。有天发现了别人说的爬虫闯关网站：<a href="http://www.heibanke.com/lesson/crawler_ex00/">黑板客爬虫闯关</a>，用来学爬虫应该是非常合适的，由易到难，也包括了以后要用到的模拟登录和多线程等，值得推荐。</p>

<h3 id="section-2">终端版知乎</h3>

<p>  在找爬虫资料的时候看到别人做的终端版的豆瓣FM和Twitter，于是就开了个脑洞想着自己能不能做一个终端版的知乎客户端出来，以后用命令行来刷知乎是不是会感觉更酷一点。</p>

<p>  在Github上搜了一圈也发现了许多爬知乎的项目，找了一两个学习了一下就开始动手写了。</p>

<h4 id="section-3">登录</h4>

<p>  首先面对的问题就是登录，登录过后才能查看属于自己的Time Line，才能给别人点赞、关注问题，在早期开始写的时候登录并不需要验证码，所以一个post把账号密码传到服务器就搞定了，但是我发现一边在爬的时候知乎也一边在增加反爬虫的机制了。比如登录的过程中开始增加验证码了，而且获取验证码的url也改了：http://www.zhihu.com/captcha.gif?r=1468727020613&amp;type=login，参数r表示的是当前时间的时间戳，重点是一定要带上type＝login这个参数，否则取到的验证码是无效的！也不知那天怎么就偷懒没加这个参数，结果试了半天也不对。</p>

<h4 id="cookie">cookie</h4>

<p>  cookie是网站为了辨别用户身份、进行session跟踪而存储在用户本地的数据，也就是说网站用cookie来识别你是谁，在完成了登录之后服务器就会返回cookie.在这接下来的点赞、关注等操作我们的请求都要带上这个cookie才行，否则服务器都不知道你是谁怎么给你增加关注的问题呢？ 所以如果爬知乎请求返回的错误码是403，那基本就是因为你没表明身份了，这个可是我的血汗经验，：）。</p>

<p>  requests也提供了很方便的管理cookie的方式。</p>

<p>``` python
	session = requests.Session()</p>

<pre><code>data = {
    "email": email,
    "password": password,
    "remember_me": "true",
    "_xsrf": _xsrf,
    "captcha": captcha
}

session.post(url="https://www.zhihu.com/login/email", data=data) ```
</code></pre>

<p>  就这么简单cookie就被保存在session中了，接下来所有的请求只要通过session来处理就可以咯。</p>

<p><code>python
	# 可以查看cookie有哪些
	for cookie in session.cookies:
		print cookie
</code></p>

<h4 id="html">获取html源码中的内容</h4>

<p>  有了以上的准备之后向”https://www.zhihu.com”发请求就可以得到首页的TL了(未登录用户的话会被重定向的)，这时候获得的是html页面的源码，我们要做的就是从中解析出相应的内容，这时候就要用上另一个神器<a href="http://www.crummy.com/software/BeautifulSoup/">Beautiful Soup 4</a>了。它可以将html文本转换成DOM树模型，提供各种各样的选择器来简化获取数据的难度，比起用正则表达式来匹配数据的方式高到不知道哪里去了。但我也还是建议掌握正则表达式的用法，在一些获取简单数据如_xsrf上还是很方便的，而且感觉还是写正则比较帅。</p>

<h4 id="js">解决JS中的请求</h4>

<p>  很多时候数据是通过在JavaScript脚本中触发请求去获取的，就像上文请求到的Time Line只包括了首页的20条动态，而在往后知乎就是通过JS动态请求数据的，显然在终端中是无法触发到那段JS的。</p>

<p>  而要解决这个问题，最核心的在于确定请求数据的API，Chrome的开发者模式就提供来很大便利了。打开console，查看network，就很容易发现请求的url了。</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/console.png" alt="" /></p>

<p>  很容易发现上图中HomeFeedListV2就是获取下一页Time Line的请求啦，于是就又能愉快的继续下去了，包括后来所有的点赞、关注问题等等也都是这样来处理的。</p>

<p>  PS. console里会发布招聘信息的，好像很多互联网都喜欢这么搞了。</p>

<h4 id="section-4">多线程提升体验</h4>

<p>  如果在刷TL的时候总是等到用户已经看到这一页的时候在去请求就会感觉到明显的卡顿，因为网络请求总是需要耗时的，感觉这样体验就不太好，于是为了提升响应速度我采用了多线程的方式。</p>

<p>  当前一个主线程在监听用户的输入并作相应的处理，然后再开一个线程在后台请求TL的数据，为了良心的爬知乎，不给服务器造成过大的压力我设定了一个阈值：保证有十页的内容给用户看，否则才让线程取数据，并且一秒只发一个请求。这也是在学爬虫的时候看到的建议：我们是在获取数据，而不是在给别人的服务器做压力测试。而只开一个线程是为了保证获取到的数据在时间上是保证连续的，如果有多个线程返回的话就需要额外的开销来维护，所以没有选择这么做。这样一来客户端响应的时间确实快了很多，刷起TL来也更开心了：）。</p>

<h4 id="section-5">效果图</h4>

<p>  一起看看效果吧:</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/login.png" alt="登录" />
<img src="http://7xqncq.com1.z0.glb.clouddn.com/TimeLine.png" alt="Time Line" />
<img src="http://7xqncq.com1.z0.glb.clouddn.com/help.png" alt="help" />
<img src="http://7xqncq.com1.z0.glb.clouddn.com/zan.png" alt="用命令点赞" />
<img src="http://7xqncq.com1.z0.glb.clouddn.com/zhihu.png" alt="知乎动态更新" /></p>

<h4 id="todo">TODO</h4>

<p>  现在的功能还比较基本，主要是我一般也就看看不太爱答题或者评论，不过以后应该会接着扩展的，包括导出答案备份、增加评论等等的功能，反正会一直维护下去的吧，因为这算是我目前为止自己最喜欢的一个项目了。</p>

<p>  加油。</p>
]]></content>
  </entry>
  
</feed>
