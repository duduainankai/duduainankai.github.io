<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[分类：java | 出头天]]></title>
  <link href="http://duduainankai.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://duduainankai.github.io/"/>
  <updated>2018-04-06T12:39:04+08:00</updated>
  <id>http://duduainankai.github.io/</id>
  <author>
    <name><![CDATA[杜杜]]></name>
    <email><![CDATA[nkdudu@126.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[阿里巴巴Java开发手册]]></title>
    <link href="http://duduainankai.github.io/blog/2017/02/13/a-li-ba-ba-Javakai-fa-shou-ce/"/>
    <updated>2017-02-13T20:03:05+08:00</updated>
    <id>http://duduainankai.github.io/blog/2017/02/13/a-li-ba-ba-Javakai-fa-shou-ce</id>
    <content type="html"><![CDATA[<p>  年不知不觉就过完了，马上又要开学了，不是很开心。快乐的时间总是特别短暂，前天晚上还在家里的街上开着车和同学鬼哭狼嚎其实不想走其实我想留(是真的不想走)，然后今天就已经到学校了。</p>

<p>  一个假期干的事情也不多，在家陪陪妈妈打打麻将和同学每天吃吃喝喝就已经去掉一大半时间了，正事干的也不多。前两天刷知乎的时候看到大家在讨论阿里出的一个Java开发手册，评论还不错于是找来看了看，收获不小也有很多切身体会，写篇博客小小的记录一下吧。<!--more--></p>

<blockquote>
  <p>【强制】 代码中的命名严禁使用拼音与英文混合的方式,更不允许直接使用中文的方式。 说明:正确的英文拼写和语法可以让阅读者易于理解,避免歧义。注意,即使纯拼音命名方式 也要避免采用。 <br />
【强制】类名使用 UpperCamelCase 风格,必须遵从驼峰形式,但以下情形例外:(领域模型 的相关命名)DO / BO / DTO / VO等。<br />
【强制】方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格,必须遵从 驼峰形式。<br />
【强制】常量命名全部大写,单词间用下划线隔开,力求语义表达完整清楚,不要嫌名字长。</p>
</blockquote>

<p>  用拼音命名感觉会很别扭，但是我在做OJ的时候也确实这么干过。。还好做项目的时候没有试过，相似的是在上个学期碰见过用中文做数据库表名的，让我看的一阵蛋疼。至于驼峰命名法也是感觉还是挺常见的习惯，也一直在用，顺便提供一个<a href="http://unbug.github.io/codelf/#%E9%A2%84%E5%AE%9A">变量命名神器</a>。</p>

<blockquote>
  <p>【强制】POJO 类中布尔类型的变量,都不要加 is,否则部分框架解析会引起序列化错误。 反例:定义为基本数据类型boolean isSuccess;的属性,它的方法也是isSuccess(),RPC 框架在反向解析的时候,“以为”对应的属性名称是 success,导致属性获取不到,进而抛出异常。</p>
</blockquote>

<p>  好像是阿里内部有踩过这样的坑，虽然还没有碰到过但还是记下来比较好。</p>

<blockquote>
  <p>【推荐】接口类中的方法和属性不要加任何修饰符号(public 也不要加),保持代码的简洁性,并加上有效的Javadoc注释。尽量不要在接口里定义变量,如果一定要定义变量,肯定是与接口方法相关,并且是整个应用的基础常量。</p>
</blockquote>

<p>  这条还是第一次看见，知乎上R大的解释是：Java的interface声明的成员方法，默认就是public abstract的，所以这两个修饰符别出来就是最简洁明了的写法；而interface里声明的变量默认就是public static final的——只能声明共有常量，所以这些修饰符也是不要写出来最简单明了。</p>

<blockquote>
  <p>【强制】if/for/while/switch/do 等保留字与左右括号之间都必须加空格。<br />
【强制】任何运算符左右必须加一个空格。<br />
【强制】缩进采用4个空格,禁止使用tab字符。</p>
</blockquote>

<p>  前两条也是用了很久都产生强迫症了，看别人的代码不加都会难受。有种说法叫真的程序员都是四个空格从不用tab，但是我经常偷懒按tab，在python上翻过好几次车。</p>

<blockquote>
  <p>【强制】关于基本数据类型与包装数据类型的使用标准如下:<br />
1) 所有的 POJO 类属性必须使用包装数据类型。<br />
2) RPC方法的返回值和参数必须使用包装数据类型。<br />
3) 所有的局部变量【推荐】使用基本数据类型。</p>
</blockquote>

<p>  NPE应该是Java中最常见的异常了，特别是在Java提供了自动拆箱的功能以后，这样的bug有时候很难发现，也是原先没有注意到的一点。</p>

<blockquote>
  <p>【推荐】使用索引访问用 String 的 split 方法得到的数组时,需做最后一个分隔符后有无
内容的检查,否则会有抛 IndexOutOfBoundsException 的风险。
说明:<br />
String str = “a,b,c,,”;<br />
String[] ary = str.split(“,”); //预期大于 3,结果是 3 <br />System.out.println(ary.length);<br /></p>
</blockquote>

<p>  这一条也是很有意思，split函数看上去很方便但其实坑不少。首先它接收的参数是一个string，但会首先判断这个string是不是一个正则表达式，也就是说如果这个string包含了.?等等的字符的话并不能按照预期的通过.来分割原来的字符串，而要将这个.进行转义，也就是参数应该是\.。其次对于分割完成的结果，函数会从后往前遍历，如果得到的是个空串，那么这个空串会被舍弃掉直到遇到第一个不是空串的位置停止，最后返回的结果是从起始位置到倒数第一个非空串为止，也就是上面的例子最后输出的数组长度是3而不是4的原因了。</p>

<blockquote>
  <p>【强制】不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式,如果并发操作,需要对Iterator对象加锁。</p>
</blockquote>

<p>  这是Java的fast fail机制：当多个线程对同一个集合的内容进行操作的时候，某一个线程通过iterator去遍历集合的过程中发现集合的内容被其他线程修改了，就会抛出ConcurrentModificationException异常，产生fast fail事件。这是因为在迭代器在调用next()和remove()方法时都会执行checkForComodification()方法，如果modCount不等于expectedModCount就会抛出异常，而只有当迭代器迭代过程中集合进行了会影响个数的操作之后才有可能发生这种情况。而为了达到多个线程对同一个集合进行修改的目的，应该采用concurrent包下的并发集合类，比如CopyOnWriteArrayList，此时所有的修改会通过在原来的数组的拷贝上进行来避免冲突。</p>

<blockquote>
  <p>【强制】线程资源必须通过线程池􏰁供,不允许在应用中自行显式创建线程。<br />
【强制】线程池不允许使用 Executors 去创建,而是通过 ThreadPoolExecutor 的方式,这样 的处理方式让写的同学更加明确线程池的运行规则,规避资源耗尽的风险。<br />
说明:Executors 返回的线程池对象的弊端如下:<br />
1) FixedThreadPool 和 SingleThreadPool:<br />
允许的请求队列长度为 Integer.MAX_VALUE,可能会堆积大量的请求,从而导致 OOM。<br />
2) CachedThreadPool 和 ScheduledThreadPool:<br />
允许的创建线程数量为 Integer.MAX_VALUE,可能会创建大量的线程,从而导致 OOM。<br /></p>
</blockquote>

<p>  对于第一点还是很容易理解的，因为频繁的创建销毁线程会带来额外的系统资源的开销。第二点也是原先没有太注意的地方，学习了。</p>

<h4 id="section">总结</h4>

<p>  看完收获还是很多的，也小小弥补了一下假期太放松带来的罪恶感。不过这个上面刚说到运算符前后要留空格到下面其他总结中自己举得代码例子就没遵守是什么鬼。</p>

<p>  想来很多都是阿里人自己踩过坑得到的经验，很多我还没有经历过的可能感觉不那么重要，比如会用FixedThreadPool会有OOM的可能这件事，做个小项目的话很哪有这种经历的吧。不过写代码大概就是这样一件有趣的事，自己踩过的坑吃过的苦才会记忆的更加深刻吧。</p>

<p>  马上也快找工作了，希望也能有机会加入阿里这样的大公司踩一踩坑吧。加油。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿里云OSS初体验]]></title>
    <link href="http://duduainankai.github.io/blog/2016/08/03/a-li-yun-osschu-ti-yan/"/>
    <updated>2016-08-03T15:27:32+08:00</updated>
    <id>http://duduainankai.github.io/blog/2016/08/03/a-li-yun-osschu-ti-yan</id>
    <content type="html"><![CDATA[<p>  终于开始放暑假了，这一个学期一边要带着几个学弟一起做实验室项目还要一边上CSDI这种神课真的是身心具疲。不过确实也收获了很多原来不曾有过的体验，也算有所成长了吧。现在放假了也可以有时间来总结总结这个项目里的内容了。</p>

<p>  先记录其中一个最感兴趣也比较新鲜的阿里云对象存储OSS的使用吧。<!--more--></p>

<h3 id="oss">OSS是什么</h3>
<p>  阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。简单来说把每一个被存储的文件看作一个对象，可以通过API或者控制台的方式进行上传下载。同时支持流式写入和文件写入，以及流式读取文件。可以与CDN搭配使用，OSS作为源站，提供稳定、高带宽的服务。</p>

<h3 id="oss-1">选择OSS的原因</h3>
<p>  简单来说这个项目要完成的一个点就是开发的网站上面能够提供上传视频、视频存储以及多人同时观看视频的功能。</p>

<p>  为了保证视频文件的可用性，在最初的设计上我们采用的方式是后端用开源的hdfs来存储文件，同时利用hadoop提供的Java API额外开发一个与文件系统进行上传下载交互的应用服务，使用tomcat作为应用服务器。</p>

<p>  当我们确实这么开发完成后发现其实存在着很多的不足之处，甚至是比较严重的问题:</p>

<p>  1.每一次视频的请求都需要两次的视频传输。第一次是从hdfs到应用服务器的传输，第二次是应用服务器返回给前端页面的传输。</p>

<p>  2.视频的流式传输需要自己实现。</p>

<p>  对于第一点，每一次传输都要占据一定的带宽，特别是当视频比较大的时候，多一次的传输意味着多一倍的等待时间。我们试过在应用服务器下缓存热度高的视频，但这毕竟不能彻底解决这个问题。第二点又更是个大问题了，而且一开始并没有考虑到只是简单的从hdfs读取到文件后写进response的输出流中，于是返回到播放器中的视频必须全部下载完以后才能够拖动进度条，否则的话会继续从头开始播放，极大的影响了用户体验。</p>

<p>  后来网上搜了一圈相应的解决方案，论坛里有人提到可以使用OSS，于是就到阿里云官网简单的了解了一下。在使用OSS的情况下，新增的文件系统的应用服务器完全由阿里云的服务提供，而不用我们维护，同时支持流式读取文件也可以很好的解决视频拖拽播放的需求。于是就要苦逼的把原来上传下载的逻辑都重新写过了。</p>

<h3 id="oss-2">OSS的使用</h3>

<p>  阿里云OSS提供了许多的SDK，还是很人性化的，但是也看到很多人在论坛吐槽文档不够详细，刚好记录下自己摸索的过程。短时间内解决这个也有着不小的挑战，但是毕竟有着死线在驱动效率也是高了不少。</p>

<h4 id="section">准备工作</h4>

<p>  其实就是要开通OSS服务，选择套餐，实名认证，我们采用的是半年40G的存储包，只要5块钱还是相当划算的。然后需要创建一个存储空间即bucket，获取账号的accessId和accessKey。</p>

<h4 id="oss-3">使用OSS</h4>

<p>  官网提供了三个教程进阶的介绍了直接在客户端签名、在服务端签名、在服务端签名并设置回调来讲解在一个web应用中使用OSS。对于第一种直接把accessId和accessKey暴露在客户端JS代码中的方式有风险，并不推荐在项目中使用，因此我也就不记录了。</p>

<p><strong>服务端签名，没有回调</strong></p>

<p>  在服务器端用accessId、accessKey和有效时长进行签名，客户端通过ajax请求获取的方式是比较安全的。整个流程的示意图是：</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/oss1.png" alt="" /></p>

<p>  然后来看看服务器端生成签名的代码吧。记得要先导入阿里云提供的aliyun-sdk-oss-2.0.6.jar、aliyun-java-sdk-sts-2.1.6.jar、aliyun-java-sdk-core-2.1.7.jar这三个包。</p>

<p>``` java
private final static String endpoint = “你的OSSendpoint”;
private final static String accessId = “你账号的accessId”;
private final static String accessKey = “你账号的accessKey”;
private final static String bucket = “文件上传到的bucket”;
private String host = “https://” + bucket + “.” + endpoint;</p>

<p>/**
 * 生成签名policy的函数
 * @param dir  存储所上传文件的bucket下的文件夹
 */
private void generatePolicy(String dir) {
    // 初始化oss客户端
    OSSClient client = new OSSClient(endpoint, accessId, accessKey);
    try { 	
    	long expireTime = 3000;		// 签名有效时长，单位秒
    	long expireEndTime = System.currentTimeMillis() + expireTime * 1000;
        Date expiration = new Date(expireEndTime);
        PolicyConditions policyConds = new PolicyConditions();
        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000);
        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</p>

<pre><code>    // 生成签名
    String postPolicy = client.generatePostPolicy(expiration, policyConds);
    byte[] binaryData = postPolicy.getBytes("utf-8");
    String encodedPolicy = BinaryUtil.toBase64String(binaryData);
    String postSignature = client.calculatePostSignature(postPolicy);
    dataMap.put("accessid", accessId);
    dataMap.put("policy", encodedPolicy);
    dataMap.put("signature", postSignature);
    dataMap.put("dir", dir);
    dataMap.put("host", host);
    dataMap.put("expire", String.valueOf(expireEndTime / 1000));

    // 需要在oss控制台设置cros，允许post方法的执行
    response.setHeader("Access-Control-Allow-Origin", "*");
    response.setHeader("Access-Control-Allow-Methods", "GET, POST");
} catch (Exception e) {
	e.printStackTrace();
} }
</code></pre>

<p>``` 
  前端通过ajax等方式发送请求获取到这个policy，然后构造相应的表单数据发送请求给oss，就可以实现文件的上传了。</p>

<p><code>java
url: host, // 后台返回的host
data: { 
    'key' : g_object_name,	// 存储的文件名
    'policy': policyBase64,	// 从后台获取的policy
    'OSSAccessKeyId': accessid, // 从后台获取的accessid
    'success_action_status' : '200', //让服务端返回200,不然，默认会返回204
    'signature': signature, // 从后台获取的签名
    file: $scope.file // 上传的文件，该字段一定要放在最后，否则会报400
}
</code></p>

<p><strong>服务端签名，设置回调</strong></p>

<p>  很多时候只实现了文件的上传并不够。比如用户上传一个视频后我们往往还需要往数据库里添加一条记录，记录是谁上传了视频，上传的视频在哪个分类下等等。OSS提供了设置回调函数的功能，使得可以在完成文件上传后向我们指定的应用服务器的接口发送一个相应的请求来实现上面的。这时候的流程图和生成policy的代码是这样的:</p>

<p><img src="http://7xqncq.com1.z0.glb.clouddn.com/oss2.png" alt="" /></p>

<p>``` java
private final static String endpoint = “你的OSSendpoint”;
private final static String accessId = “你账号的accessId”;
private final static String accessKey = “你账号的accessKey”;
private final static String bucket = “文件上传到的bucket”;
private String host = “https://” + bucket + “.” + endpoint;</p>

<p>/**
 * 生成签名policy的函数
 * @param dir  存储所上传文件的bucket下的文件夹
 * @param callback_param  回调函数组成的字符串
 */
private void generatePolicy(String dir, String callback_param) {
    OSSClient client = new OSSClient(endpoint, accessId, accessKey);
    try { 	
    	long expireTime = 3000;		// 签名有效时长，单位秒
    	long expireEndTime = System.currentTimeMillis() + expireTime * 1000;
        Date expiration = new Date(expireEndTime);
        PolicyConditions policyConds = new PolicyConditions();
        policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, 0, 1048576000);
        policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</p>

<pre><code>    String postPolicy = client.generatePostPolicy(expiration, policyConds);
    byte[] binaryData = postPolicy.getBytes("utf-8");
    String encodedPolicy = BinaryUtil.toBase64String(binaryData);
    String postSignature = client.calculatePostSignature(postPolicy);
    dataMap.put("accessid", accessId);
    dataMap.put("policy", encodedPolicy);
    dataMap.put("signature", postSignature);
    //dataMap.put("expire", formatISO8601Date(expiration));
    dataMap.put("dir", dir);
    dataMap.put("host", host);
    dataMap.put("expire", String.valueOf(expireEndTime / 1000));
    
    // 如果回调函数的字符串不为空则添加，否则即为不需要回调的方法
    if (callback_param != null) {
        byte[] binaryDatas = callback_param.getBytes();
        String callback = BinaryUtil.toBase64String(binaryDatas);
        dataMap.put("callback", callback);
    }

response.setHeader("Access-Control-Allow-Origin", "*");
    response.setHeader("Access-Control-Allow-Methods", "GET, POST");
} catch (Exception e) {
	e.printStackTrace();
} } ``` &amp;emsp;&amp;emsp;这是callback_param的一个例子：
</code></pre>

<p><code>java
String callback_param="{" + 
    "\"callbackUrl\":" +
    "\""+ callbackurl + "\"," + 
    "\"callbackBody\":" +
    "\"bucket=${bucket}&amp;object=${object}&amp;size=${size}&amp;mimeType=${mimeType}" +
    "&amp;imageInfo.height=${imageInfo.height}&amp;imageInfo.width=${imageInfo.width}" +
    "&amp;name=${x:name}&amp;token=" + token + "&amp;videotype=1\"" + 
"}";
// bucket等参数是oss执行回调时会自动加上的参数，而如果我们需要自定义参数并且需要在执行到上传文件的请求时才能确定的，
// 比如这边的name，那么我们需要采用${x:***}的方式，***表示的是变量名
// 而可以在生成policy就知道值的参数比如这边的token那么直接拼接字符串就行了
// callbackurl需要指定相应回调请求的服务器、端口和URL，method为POST
</code></p>

<p>  前端构造的上传文件的数据中需要增加回调body和自定义参数的值：</p>

<p><code>java
url: host,
data: { 
  'key' : g_object_name,	// 存储的文件名
  'policy': policyBase64,	// 从后台获取的policy
  'OSSAccessKeyId': accessid, // 从后台获取的accessid
  'success_action_status' : '200', //让服务端返回200,不然，默认会返回204
  'signature': signature, // 从后台获取的签名
  'callback' : callbackbody,	// 从后台获取的回调内容
  'x:name' : $scope.file.name,	// 自定义参数name的值，键一定要是x:***的形式
  file: $scope.file // 上传的文件，该字段一定要放在最后，否则会报400
}
</code></p>

<p>  这样就完成了整个OSS上传文件的过程啦，其实做完了来看好像内容也不多，但刚上手的时候还是有很多困惑，特别是自定义参数那一块，好多人都在吐槽文档写的不清楚。</p>

<p>  除此之外，OSS还可以与许多的富文本编辑器结合，比如我们项目中采用的是summernote。原本上传图片的话summernote会直接编码图片成字符串，然后与其他文本内容放在一起存进数据库里，但这样一来图片多的话编码出的字符串会特别大，从数据库取出的耗时会特别长。如果修改成上传的图片存储到OSS中，那么编码之后的内容就只是一个图片的地址，这样就小很多了。</p>

<h3 id="section-1">总结</h3>

<p>  其实不止是阿里云，越来越多的云厂商包括腾讯云、七牛云等等都提供了相应的对象存储服务。而越来越多的云服务比如云主机、云数据库等等也越来越方便了开发者，好比利用了OSS省去了自建存储系统的过程，同时自带三备份、与CDN相结合提高访问速率，让开发者可以专注业务逻辑的实现，这确实是造福广大开发者的好事。</p>

<p>  我也相信越来越多的服务都会往云上迁移，越来越多的开发者也会更多的了解到这些云产品的使用甚至是开发。</p>
]]></content>
  </entry>
  
</feed>
